package com.example.xml;

import java.io.StringReader;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

public class StringToXml {

	public static void main(String[] args) {
		String xmlStr = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><importPackage><importProcessId>c0ea3a65-a254-4568-be91-05a4259616b7</importProcessId><packageManifest>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHBhY2thZ2Ugc3lzdGVtLXZlcnNpb249IjYuMCI+CjxzeXN0ZW0vPgo8cHJvamVjdCBpZD0iMTU3NjY0Mzk0IiBuYW1lPSIgUjIgQ0MgTmV3IFRlbXBsYXRlIFBhY2sgKENvbXBsZXgpIDIiIHdvcmtmbG93LXN0ZXA9IjEwMDAiIHNhbXBsZS1kYXRlPSIyMDE4MDExMjAwMDAwMCIgdGFyZ2V0LWFwcHJvdmFsLWRhdGU9IjIwMTgwMjExMDAwMDAwIiB0YXJnZXQtcmVsZWFzZS1kYXRlPSIyMDE4MDIxMTAwMDAwMCI+CjxkZXNjcmlwdGlvbj5SMiBDQyBOZXcgVGVtcGxhdGUgUGFjayAoQ29tcGxleCkgMjwvZGVzY3JpcHRpb24+Cjxwcm9qZWN0aXRlbSBpZD0iMTU4MTg3OTY4IiByZXNpZD0iMTU3NzU1Njc5Ii8+Cjxwcm9qZWN0aXRlbSBpZD0iMTU4MTg4MTQzIiByZXNpZD0iMTU3NzU3MTA2Ii8+Cjxwcm9qZWN0aXRlbSBpZD0iMTU4MTg4NzkwIiByZXNpZD0iMTU3NzU4NDc3Ii8+Cjxwcm9qZWN0aXRlbSBpZD0iMTU4MTkwODI2IiByZXNpZD0iMTU3NzU4OTM2Ii8+Cjxwcm9qZWN0aXRlbSBpZD0iMTU4MTg3ODk2IiByZXNpZD0iMTU3NzY2NTQ1Ii8+Cjxwcm9qZWN0aXRlbSBpZD0iMTU4MTg2MzM1IiByZXNpZD0iMTU3NzY2NjI0Ii8+Cjxwcm9qZWN0aXRlbSBpZD0iMTU4MTg3ODgyIiByZXNpZD0iMTU3NzY2NjI4Ii8+CjwvcHJvamVjdD4KPHJlcyBpZD0iMTU3NzU1Njc5IiBuYW1lPSJNUEMtMzI4Ni0wMDAiIHBhdGg9Ii9NZXRMaWZlL0NsYWltQ2VudGVyL1RlbXBsYXRlcy9Gb3Jtcy9NUEMtMzI4Ni0wMDAiIHR5cGU9IkQiIG1pbWVUeXBlPSJhcHBsaWNhdGlvbi94LXRodW5kZXJoZWFkLWRkdiI+CjxkZXNjcmlwdGlvbj5Ob3RpY2UgdG8gSW5zdXJlZCB3aXRoIERvY3MgYW5kIEV2aWRlbmNlIE9wdGlvbjwvZGVzY3JpcHRpb24+CjxrZXl3b3Jkcz5jbGFpbSwwMDAsMzI4NixDVywwMTE4LDMyODYtMDAwLTAxMTgsTVBDLTMyODYtMDAwLDMyODYtMDAwLGVkZWxpdmVyeSxwcmludCxOb3RpY2UgdG8gSW5zdXJlZCB3aXRoIERvY3MgYW5kIEV2aWRlbmNlIE9wdGlvbixTdWJyb2dhdGlvbixDb250YWN0PC9rZXl3b3Jkcz4KPHJlc3ZlciBpZD0iMTU4MTg3OTY4IiBtYWpvcj0iMSIgbWlub3I9IjAiIHJldmlzaW9uPSIwIiBlZmZlY3RpdmUtZnJvbT0iMjAwMTAxMDEwMDAwMDAiIGVmZmVjdGl2ZS10bz0iMjA5OTEyMzEyMzU5NTkiIHdvcmtmbG93LXN0ZXA9IjEwMDAiIHN0YXRlPSJYIi8+CjwvcmVzPgo8cmVzIGlkPSIxNTc3NTcxMDYiIG5hbWU9Ik1QQy0zNDcyLTIwMCIgcGF0aD0iL01ldExpZmUvQ2xhaW1DZW50ZXIvVGVtcGxhdGVzL0Zvcm1zL01QQy0zNDcyLTIwMCIgdHlwZT0iRCIgbWltZVR5cGU9ImFwcGxpY2F0aW9uL3gtdGh1bmRlcmhlYWQtZGR2Ij4KPGRlc2NyaXB0aW9uPlN1cHBsZW1lbnRhbCBQYXltZW50IHdpdGggbm8gUmVjb3ZlcmFibGUgRGVwcmVjaWF0aW9uPC9kZXNjcmlwdGlvbj4KPGtleXdvcmRzPmNsYWltLDIwMCwzNDcyLENXLE1QQy0zNDcyLTIwMCwzNDcyLTIwMCxlZGVsaXZlcnkscHJpbnQsU3VwcGxlbWVudGFsIFBheW1lbnQgd2l0aCBubyBSZWNvdmVyYWJsZSBEZXByZWNpYXRpb24sUGF5bWVudHMsTVBDLTM0NzItMjAwLTAzMjIsMDMyMjwva2V5d29yZHM+CjxyZXN2ZXIgaWQ9IjE1ODE4ODE0MyIgbWFqb3I9IjEiIG1pbm9yPSIwIiByZXZpc2lvbj0iMCIgZWZmZWN0aXZlLWZyb209IjIwMDEwMTAxMDAwMDAwIiBlZmZlY3RpdmUtdG89IjIwOTkxMjMxMjM1OTU5IiB3b3JrZmxvdy1zdGVwPSIxMDAwIiBzdGF0ZT0iWCIvPgo8L3Jlcz4KPHJlcyBpZD0iMTU3NzU4NDc3IiBuYW1lPSJNUEMtMzQyMi0wMDAiIHBhdGg9Ii9NZXRMaWZlL0NsYWltQ2VudGVyL1RlbXBsYXRlcy9Gb3Jtcy9NUEMtMzQyMi0wMDAiIHR5cGU9IkQiIG1pbWVUeXBlPSJhcHBsaWNhdGlvbi94LXRodW5kZXJoZWFkLWRkdiI+CjxkZXNjcmlwdGlvbj5FRFI8L2Rlc2NyaXB0aW9uPgo8a2V5d29yZHM+Y2xhaW0sMDAwLDM0MjIsc2lnbmF0dXJlLENXLDAxMTgsMzQyMi0wMDAtMDExOCxNUEMtMzQyMi0wMDAsMzQyMi0wMDAsZWRlbGl2ZXJ5LHByaW50LGVzaWduLEVEUixBdXRob3JpemF0aW9uczwva2V5d29yZHM+CjxyZXN2ZXIgaWQ9IjE1ODE4ODc5MCIgbWFqb3I9IjEiIG1pbm9yPSIwIiByZXZpc2lvbj0iMCIgZWZmZWN0aXZlLWZyb209IjIwMDEwMTAxMDAwMDAwIiBlZmZlY3RpdmUtdG89IjIwOTkxMjMxMjM1OTU5IiB3b3JrZmxvdy1zdGVwPSIxMDAwIiBzdGF0ZT0iWCIvPgo8L3Jlcz4KPHJlcyBpZD0iMTU3NzU4OTM2IiBuYW1lPSJNUEMtMzgyNS0wMDAiIHBhdGg9Ii9NZXRMaWZlL0NsYWltQ2VudGVyL1RlbXBsYXRlcy9Gb3Jtcy9NUEMtMzgyNS0wMDAiIHR5cGU9IkQiIG1pbWVUeXBlPSJhcHBsaWNhdGlvbi94LXRodW5kZXJoZWFkLWRkdiI+CjxkZXNjcmlwdGlvbj5WYWx1ZWQgQ3VzdG9tZXIgTGV0dGVyIC0gVG90YWwgTG9zczwvZGVzY3JpcHRpb24+CjxrZXl3b3Jkcz5jbGFpbSwwMDAsMzgyNSxDVywwMTE4LDM4MjUtMDAwLTAxMTgsTVBDLTM4MjUtMDAwLDM4MjUtMDAwLGVkZWxpdmVyeSxwcmludCxWYWx1ZWQgQ3VzdG9tZXIgTGV0dGVyIC0gVG90YWwgTG9zcyxUb3RhbCBMb3NzPC9rZXl3b3Jkcz4KPHJlc3ZlciBpZD0iMTU4MTkwODI2IiBtYWpvcj0iMSIgbWlub3I9IjAiIHJldmlzaW9uPSIwIiBlZmZlY3RpdmUtZnJvbT0iMjAwMTAxMDEwMDAwMDAiIGVmZmVjdGl2ZS10bz0iMjA5OTEyMzEyMzU5NTkiIHdvcmtmbG93LXN0ZXA9IjEwMDAiIHN0YXRlPSJYIi8+CjwvcmVzPgo8cmVzIGlkPSIxNTc3NjY1NDUiIG5hbWU9Ik1QQy0zMzU3LTAwMCIgcGF0aD0iL01ldExpZmUvQ2xhaW1DZW50ZXIvVGVtcGxhdGVzL0Zvcm1zL01QQy0zMzU3LTAwMCIgdHlwZT0iRCIgbWltZVR5cGU9ImFwcGxpY2F0aW9uL3gtdGh1bmRlcmhlYWQtZGR2Ij4KPGRlc2NyaXB0aW9uPkx0ciB0byBhdHR5IHJlIHJlYXNzaWdubWVudCwgaW5mbyBuZWVkZWQgZm9yIGV2YWwmIzEzOwo8L2Rlc2NyaXB0aW9uPgo8a2V5d29yZHM+Y2xhaW0sMDAwLDMzNTcsQ1csMDExOCwzMzU3LTAwMC0wMTE4LE1QQy0zMzU3LTAwMCwzMzU3LTAwMCxlZGVsaXZlcnkscHJpbnQsVHJhbnNmZXJzLEx0ciB0byBhdHR5IHJlIHJlYXNzaWdubWVudCxpbmZvIG5lZWRlZCBmb3IgZXZhbDwva2V5d29yZHM+CjxyZXN2ZXIgaWQ9IjE1ODE4Nzg5NiIgbWFqb3I9IjEiIG1pbm9yPSIwIiByZXZpc2lvbj0iMCIgZWZmZWN0aXZlLWZyb209IjIwMDEwMTAxMDAwMDAwIiBlZmZlY3RpdmUtdG89IjIwOTkxMjMxMjM1OTU5IiB3b3JrZmxvdy1zdGVwPSIxMDAwIiBzdGF0ZT0iWCIvPgo8L3Jlcz4KPHJlcyBpZD0iMTU3NzY2NjI0IiBuYW1lPSJNUEMtMzc4OC0wMDAiIHBhdGg9Ii9NZXRMaWZlL0NsYWltQ2VudGVyL1RlbXBsYXRlcy9Gb3Jtcy9NUEMtMzc4OC0wMDAiIHR5cGU9IkQiIG1pbWVUeXBlPSJhcHBsaWNhdGlvbi94LXRodW5kZXJoZWFkLWRkdiI+CjxkZXNjcmlwdGlvbj5QSVAgQWNrbm93bGVkZ2VtZW50IExldHRlciB0byBBdHRvcm5leSB3aXRoIFBJUCBBcHBsaWNhdGlvbjwvZGVzY3JpcHRpb24+CjxrZXl3b3Jkcz5jbGFpbSwwMDAsMzc4OCxDVywwMTE4LDM3ODgtMDAwLTAxMTgsTVBDLTM3ODgtMDAwLDM3ODgtMDAwLGVkZWxpdmVyeSxwcmludCxQSVAgQWNrbm93bGVkZ2VtZW50IExldHRlciB0byBBdHRvcm5leSB3aXRoIFBJUCBBcHBsaWNhdGlvbixBY2tub3dsZWRnbWVudDwva2V5d29yZHM+CjxyZXN2ZXIgaWQ9IjE1ODE4NjMzNSIgbWFqb3I9IjEiIG1pbm9yPSIwIiByZXZpc2lvbj0iMCIgZWZmZWN0aXZlLWZyb209IjIwMDEwMTAxMDAwMDAwIiBlZmZlY3RpdmUtdG89IjIwOTkxMjMxMjM1OTU5IiB3b3JrZmxvdy1zdGVwPSIxMDAwIiBzdGF0ZT0iWCIvPgo8L3Jlcz4KPHJlcyBpZD0iMTU3NzY2NjI4IiBuYW1lPSJNUEMtMzQ0Mi0wMjIiIHBhdGg9Ii9NZXRMaWZlL0NsYWltQ2VudGVyL1RlbXBsYXRlcy9Gb3Jtcy9NUEMtMzQ0Mi0wMjIiIHR5cGU9IkQiIG1pbWVUeXBlPSJhcHBsaWNhdGlvbi94LXRodW5kZXJoZWFkLWRkdiI+CjxkZXNjcmlwdGlvbj5NTiAtIEludGVyZXN0IE5vdGlmaWNhdGlvbjwvZGVzY3JpcHRpb24+CjxrZXl3b3Jkcz5jbGFpbSwwMjIsMzQ0MixNTiwwMTE4LDM0NDItMDIyLTAxMTgsTVBDLTM0NDItMDIyLDM0NDItMDIyLGVkZWxpdmVyeSxwcmludCxNTiAtIEludGVyZXN0IE5vdGlmaWNhdGlvbixNZWRpY2FsIE1hbmFnZW1lbnQ8L2tleXdvcmRzPgo8cmVzdmVyIGlkPSIxNTgxODc4ODIiIG1ham9yPSIxIiBtaW5vcj0iMCIgcmV2aXNpb249IjAiIGVmZmVjdGl2ZS1mcm9tPSIyMDAxMDEwMTAwMDAwMCIgZWZmZWN0aXZlLXRvPSIyMDk5MTIzMTIzNTk1OSIgd29ya2Zsb3ctc3RlcD0iMTAwMCIgc3RhdGU9IlgiLz4KPC9yZXM+CjwvcGFja2FnZT4K</packageManifest></importPackage>\r\n"
				+ "";
		
		 //Use method to convert XML string content to XML Document object
	    Document doc = convertStringToXMLDocument(xmlStr);

		 System.out.println("Root Node : " + doc.getFirstChild().getNodeName());

		 System.out.println(doc.getElementsByTagName("importProcessId").item(0).getTextContent());

		

	}
	
	private static Document convertStringToXMLDocument(String xmlString) {
	    //Parser that produces DOM object trees from XML content
	    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();

	    //API to obtain DOM Document instance
	    DocumentBuilder builder = null;
	    try {
	      //Create DocumentBuilder with default configuration
	      builder = factory.newDocumentBuilder();

	      //Parse the content to Document object
	      Document doc = builder.parse(new InputSource(new StringReader(xmlString)));
	      return doc;
	    } catch (Exception e) {
	      e.printStackTrace();
	    }
	    return null;
	  }

}
